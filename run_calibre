#!/bin/ksh
# Name:     run_calibre
# Version:  $Header: /sdg/lib/cd40l/bin/RCS/run_calibre,v 1.5 2005/09/12 19:53:03 red Exp red $
# Author:   Floyd Moore
#
# Synopsis: run the calibre command line checker for DRC/LVS
#
# Usage:    run_calibre [-lvs] [-drc] ... (see options)
#####################################
#

version_string='Version: \$Revision: 2 $'

trap 'rm -f /tmp/*.tmp.$$' 0

usage()
{
   echo "Usage: run_calibre {options...} <cell name>"
   echo "  where <cell_name> is the name of the block's ic layout cell, prior to the"
   echo "  .Ic_cell_template.attr extension."
   echo $version_string
   echo "Synopsis: Execute a calibre drc/lvs for a cell"
   echo "Options:"
   echo "  [-l <layout_cell> ]"
   echo "  [-g <gds_file> ]"
   echo "     [-G] : don't regenerate the gds, use existing file"
   echo "     [-p <layout_primary_cell>]"
   echo "  [-o <output_prefix> ]: String prefix for all reports file generated by calibre"
   echo "  [-d <golden_rule_deck]: This will be inferred if a design environment is"
   echo "                          already loaded."
   echo "  [-drc]: The Default is DRC"
   echo "  [-lvs]"
   echo "     [-v <viewpoint|verilog> ]"
   echo "     [-s <spice_netlist>]"
   echo "     [-n <netlist circuit name>]"
   echo "     [-h <hcells_file>]"
   echo "     [-splitground]"
   echo "  [-cb]   enable cell mode (default is hierarchial)"
   echo "  [-flat] enable flat mode (default is hierarchial)"
   echo "-x) debug mode"
   echo ""
   echo "  Basic Usage:"
   echo "    run_calibre <cellname>"
   echo "      - run from the directory where tre <cellname>.Ic_cell file exists"
   echo "      - for a simple DRC use: run_calibre <cellname>"
   echo "      - default is to generate new gds, and run the drc"

   exit 1
}

##########################################
#     Parse Arguements from command line #
##########################################
# set globals
let debug=0
let remove_gds=1
let drc_mode=1
let lvs_mode=0
let hier_mode=1
let splitground=0
let quiet=0
user=`whoami`
mtype=`uname -a | cut -d" " -f5`
script=`basename $0`

for I in $*
do
   case "x$1" in
   x-x)          let debug=1;               shift 1;;
   x-splitground) let splitground=1;    	shift 1;;
   x-drc)        drc_mode=1; lvs_mode=0;	shift 1;;
   x-lvs)	 lvs_mode=1; drc_mode=0;        shift 1;;
   x-cb)	 hier_mode=2;                   shift 1;;
   x-flat)	 hier_mode=0;                   shift 1;;
   x-d)		 shift;
                 main_rule_deck=$1
                 echo "Main Rule Deck is ${main_rule_deck}"
                 shift 1;;
   x-l)		 shift;
                 cellname=$1
                 echo "Layout Cell is ${cellname}"
                 shift 1;;
   x-o)		 shift;
                 output_prefix=$1
                 echo "Output prefix is ${output_prefix}"
                 shift 1;;
   x-h)		 shift;
                 hcells_file=$1
                 #echo "Gds File is ${gds_file}"
                 shift 1;;
   x-G)		 let remove_gds=0;		shift 1;;
   x-g)		 shift;
                 gds_file=$1
                 #echo "Gds File is ${gds_file}"
                 shift 1;;
   x-G)		 let remove_gds=0;		shift 1;;
   x-p)		 shift;
                 layout_primary=$1
                 echo "Layout Primary name is ${layout_primary}"
                 shift 1;;
   x-v)		 shift;
                 lvs_mode=1
                 drc_mode=0
                 logic_source=$1
                 #echo "Design Viewpoint is ${logic_source}"
                 shift 1;;
   x-s)		 shift;
                 lvs_mode=1
                 drc_mode=0
                 spice_netlist=$1
                 #echo "Spice Netlist File is ${spice_netlist}"
                 shift 1;;
   x-n)		 shift;
                 netlist_primary=$1
                 echo "Netlist Primary name is ${netlist_primary}"
                 shift 1;;
   x-q)		 let quiet=1;                   shift 1;;
   x-h)                                         usage;;
   x-\?)                                        usage;;
   x-*)          echo "Invalid Arguement: $1";  usage;;
   x*)           cellname=${1:-"FOO_"};;
   esac
done

##################################################
# Setup some default configuration variables.... #
##################################################

# check options...
if [ -z "${cellname}" ]
then
   echo "No cell name specified!  Need a cell name."
   usage
   exit 1
fi

if [ $drc_mode -eq 1 -a $lvs_mode -eq 1 ]
then
   echo "Both drc and lvs modes specified.  Only one mode per run supported"
   exit 1
fi 

if [ $drc_mode -eq 0 -a $lvs_mode -eq 0 ]
then
   echo "Neither drc or lvs modes specified.  One mode per run needs to be specified"
   exit 1
fi

if [ $lvs_mode -eq 1 ]
then
   if [ -z "$spice_netlist" -a -z "$logic_source" ]
   then
      echo "A schematic source must be specified for LVS: use -l or -s options"
      exit 1
   fi
   if [ -z "$logic_source" -a -n "$spice_netlist" -a ! -f "$spice_netlist" ]
   then
      echo "Spice netlist cannot be read from $spice_netlist, and no source to derrive"
      echo "    it from was specified."
      exit 1
   fi
   if [ -n "$logic_source" -a -n "$spice_netlist" ]
   then
      echo "Both spice netlist and source were specified, will overwrite and create new netlist"
   fi
fi

dir="."
check=`echo ${cellname} | grep -e "/" `
if [ -n "$check" ]
then
   #echo "... full path to artwork specified in cell name"
   dir=${cellname%/*}
   #echo "   ... art_dir set by path to '${dir}'"
   art_dir=${dir}
else
   art_dir="."
fi
cellname=${cellname##*/}
export MGC_WD=${art_dir}
working_directory=${art_dir}


if [ -z "$MGC_HOME" ]
then
   echo "Mentor design environment not set!"
   eval $(/sdg/bin/envy -t ksh /sdg/lib/shell/mentor.setup cd40l)
   if [ -z "$MGC_HOME" ]
   then
      echo "MGC_HOME not set by envy!"
      exit 1
   fi

   echo "MGC_HOME = $MGC_HOME"
fi

if [ -x ${MGC_HOME}/bin/get_hard_name ]
then
   GET_HARD_NAME="${MGC_HOME}/bin/get_hard_name"
elif [ -x ${MGC_HOME}/bin/get_hard_name_ic ]
then
   GET_HARD_NAME="${MGC_HOME}/bin/get_hard_name_ic"
else
   echo "Cannot locate 'get_hard_name'"
   exit 1
fi

# GDS file location:
#    EITHER the command line option "gds_file"
#    OR the default:
#       if $art_dir directory specified then
#          $art_dir/<cellname>.gdsii
#       OR
#          <cell_dir>/<cellname>.gdsii
#
# ALSO if $art_dir is specified then use it as a prefix
# for the saved gds file.
#
create_gds=0
if [ -n "$gds_file" ]
then
   check=`echo ${gds_file} | grep -e "/" `
   if [ -z "$check" ]
   then
      gds_file="${gds_file}"
   fi
else
   gds_file="${cellname}.gdsii"
fi

echo "GDS File: $gds_file"

if [ ! -r "$gds_file" ]
then
   echo "Cannot read specified GDS file, will create it..."
   dir=`dirname $gds_file`
   if [ ! -w "$dir" ]
   then
      echo " ... but we cannot write to this location!"
      exit 1
   fi
   let create_gds=1
else
   if [ $remove_gds -eq 1 ]
   then
      echo "Will create new GDS file from layout"
      dir=`dirname $gds_file`
      if [ ! -w "$dir" ]
      then
         echo "  ... but, we cannot write to it!"
         echo "If this is a read-only gds file, you might want to use the "
         echo "   -G switch, to not try and overwrite the file"
         exit 1
      fi
      let create_gds=1
   fi
fi

if [ -z "$layout_primary" ]
then
   if [ $cellname = "FOO_" ]
   then
      echo "Cell name not defined and primary artwork cell not specified"
      exit -1
   fi
   layout_primary=$cellname
else
   if [ $cellname = "FOO_" ]
   then
      cellname=$layout_primary
   fi
fi


#
#  Try to determine the technology to auto-select the rules file if not
#  specified on the command line
#
if [ -z "$main_rule_deck" ]
then
   if [ -n "$MGC_HOME" ]
   then
      if [ -z "$SETUP" ]
      then
         echo "No SETUP variable, Cannot determine technology from environment."
         exit 1
      fi

      case "$SETUP" in 
         CD40L_DK) 
            if [ $drc_mode -eq 1 ] 
            then
               main_rule_deck="/sdg/lib/cd40l/tech/rev1_0/mentor/drc/tij4_drc"
            fi
            if [ $lvs_mode -eq 1 ] 
            then
               main_rule_deck="/sdg/lib/cd40l/tech/rev1_0/mentor/lvs/cd40rules"
               spice_library="/sdg/lib/cd40l/standard/rev1_0/lvs/rev1_0.spi"
               port_library="/sdg/lib/cd40l/standard/rev1_0/verilog/gate/rev1_0.v"
               custom_spice_library="/sdg/lib/cd40l/custom/rev1_0/lvs/cd40_custom_lib.spi"
               custom_port_library="/sdg/lib/cd40l/custom/rev1_0/verilog/gate/cd40_custom_lib.v"
            fi
            ;;
         HV05DK) 
            if [ $drc_mode -eq 1 ] 
            then
               main_rule_deck="/sdg/lib/hv05ta/tech/rev1_0/mentor/drc/hv05_drc"
            fi
            if [ $lvs_mode -eq 1 ] 
            then
               main_rule_deck="/sdg/lib/hv05ta/tech/rev1_0/mentor/lvs/hv05_lvs"
               spice_library="/sdg/lib/hv05ta/standard/rev1_2/lvs/rev1_0.spi"
               port_library="/sdg/lib/hv05ta/standard/rev1_2/verilog/gate/rev1_2.port.v"
            fi
            ;;
         *)
            echo "Unknown technology specified; please specify rules deck"
            exit 1;
            ;;
      esac

   else
      echo "No MGC_HOME, Cannot determine technology from environment, need to specify rules deck"
      exit 1
   fi
fi

if [ ! -r $main_rule_deck ]
then
   echo "Cannot read rules deck $main_rule_deck"
   exit 1
fi

if [ $lvs_mode -eq 1 ]
then
   # Spice file location:
   #    EITHER the command line option "spice_netlist"
   #    OR the default:
   #       if $art_dir directory specified then
   #          $art_dir/<cellname>.spi
   #       OR
   #          <cell_dir>/<cellname>.spi
   #
   # ALSO if $art_dir is specified then use it as a prefix
   # for the saved spice file.
   #
   if [ -n "$spice_netlist" ]
   then
      check=`echo ${spice_netlist} | grep -e "/" `
      if [ -z "$check" ]
      then
         spice_netlist="${spice_netlist}"
      fi
   else
      spice_netlist="${cellname}.spi"
      if [ ! -r "$spice_netlist" ]
      then
         echo "Cannot read specified spice netlist file, will create it..."
         dir=`dirname $spice_netlist`
         if [ ! -w "$dir" ]
         then
            echo " ... but we cannot write to this location!"
            exit 1
         fi
      fi
   fi
   #echo "Spice Netlist File: $spice_netlist"
fi

if [ $quiet -eq 0 ]
then
   echo "$script ..."
   echo "   $version_string"
   echo "   Cell=$cellname"
   echo "   Working Directory=$MGC_WD"
   if [ $create_gds -eq 1 ]
   then
      echo "      Creating GDS file=$gds_file"
   else
      echo "      Using existing GDS file=$gds_file"
   fi
   echo "   Rule Deck=$main_rule_deck"
   if [ $lvs_mode -eq 1 ]
   then
      if [ -n "$logic_source" ]
      then
         echo "   Schematic Source = $logic_source"
      fi
      if [ -n "$spice_netlist" ]
      then
         echo "   Schematic Netlist = $spice_netlist"
      fi
   fi
   echo "   "
fi

#############################################
#  Create the GDS for the cell if necessary #
#############################################
# GDS File Creation Criteria:
# We specified a gds file on the command line AND EITHER
#    we did NOT specify to save the original gds file
#    OR
#    the gds file does not exist
# OR we didn't specify it on the command line and need to 
#    create the gds at the default location.
#
if [ $create_gds -eq 1 ]
then
   echo "GDS ${cellname}..."

   if [ -r $gds_file ]
   then
      rm -f $gds_file
   fi

   art_name=`$GET_HARD_NAME ${art_dir}/${cellname}`
   if [ -z "${art_name}" ]
   then
      echo "Bad translation to 'art_name': ${art_name}"
      exit -1
   fi

   if [ ! -f ${art_dir}/${cellname}.Ic_cell_template.attr ]
   then
      echo "Cannot locate artwork for ${cellname}"
      exit 1
   fi

   echo "Running: iclink -co -so -i ${art_dir}/${cellname} -d -g ${gds_file}"
   iclink -co -so -i ${art_dir}/${cellname} -d -g ${gds_file} > /tmp/tmp.gds_out.$$~ 2>&1

   if [ $quiet -eq 0 ]
   then
      tail -8 /tmp/tmp.gds_out.$$~
   fi
   last_log=`/bin/ls -1 ICLink_log_* | tail -1`
   let warn=`grep Warning: $last_log | wc -l | awk '{print $1}'`
   let err=`grep Error: /tmp/tmp.gds_out.$$~ | wc -l | awk '{print $1}'`
   if [ $err -ne 0 ]
   then
      if [ $quiet -eq 1 ]
      then
         echo "Failed"
      fi
      echo "Errors in the GDS translation"
      exit 1
   else
      echo "Passed"
   fi

   if [ $warn -ne 0 ]
   then
      echo "Found $warn warnings in the gds translation"
      grep Warning: $last_log
   fi

   if [ -n "${last_log}" -a -f "${last_log}" ]
   then
      rm -f ${last_log}
   fi
   rm -f /tmp/tmp.gds_out.$$~
fi

if [ ! -r $gds_file ]
then
   echo "Cannot read gds file after iclink step!"
   exit 1
fi

# Start setup for calibre

eval $(/sdg/bin/envy -t sh /sdg/lib/shell/calibre.setup)

if [ $drc_mode -eq 1 ]
then
   summary="${cellname}.drc.summary"
   # need to create the driver deck..."
   DRIVER="_drc_driver_"
   echo "// "`date` > $DRIVER
   echo "// $script ..." >> $DRIVER
   echo "//   $version_string" >> $DRIVER
   echo "//   Cell=$cellname" >> $DRIVER
   echo "//   Working Directory=$MGC_WD" >> $DRIVER
   echo "//   GDS file=$gds_file" >> $DRIVER
   echo "//   Rule Deck=$main_rule_deck" >> $DRIVER
   echo " " >> $DRIVER
   echo "LAYOUT PATH \"$gds_file\"" >> $DRIVER
   echo "LAYOUT PRIMARY ${layout_primary}" >> $DRIVER
   echo " " >> $DRIVER
   #echo "DRC RESULTS DATABASE \"${art_dir}/${cellname}.drc.results\" ASCII" >> $DRIVER
   echo "DRC SUMMARY REPORT \"${summary}\" REPLACE HIER" >> $DRIVER

   echo "INCLUDE \"${main_rule_deck}\"" >> $DRIVER

   export MGC_CALIBRE_INTERACTIVE=1

   if [ $hier_mode -eq 1 ]
   then
      echo "Running: calibre -drc -hier $DRIVER"
      calibre -drc -hier $DRIVER
   elif [ $hier_mode -eq 2 ]
   then
      echo "Running: calibre -drc -cb $DRIVER"
      calibre -drc -cb $DRIVER
   else
      echo "Running: calibre -drc $DRIVER"
      calibre -drc $DRIVER
   fi
fi

if [ $lvs_mode -eq 1 ]
then
   # need to check for the schematic source and create a spice netlist using v2lvs if
   # necessary
   if [ -n "$logic_source" ]
   then
      echo "Extract spice netlist from schematic source = $logic_source"
      type=`echo $logic_source | awk -F. '{print $NF}' `
      if [ -z "$type" ]
      then
         echo "Cannot determine the logic source type from name: $logic_source"
         exit 1
      fi
      case $type in
         attr)  # mentor viewpoint
            echo "   ... mentor viewpoint using icnet!"
            echo "   running: icnet -lvs -preserve_case -spice_top_sub -inline_inc $logic_source -o $spice_netlist"
            icnet -lvs -preserve_case -spice_top_sub -inline_inc $logic_source -o $spice_netlist
            if [ $? -ne 0 ]
            then
               echo "icnet failed!"
               exit 1
            fi
            ;;
         v)     # verilog file
            echo "   ... creating spice netlist from verilog source, using v2lvs"
            cmdopt="-v $logic_source -s $spice_library -s $custom_spice_library -l $port_library -l $custom_port_library -i -o $spice_netlist -s0 GND -s1 VDD"
            echo "  running: v2lvs $cmdopt"
            v2lvs $cmdopt
            if [ $? -ne 0 ]
            then
               echo "v2lvs failed!"
               exit 1
            fi
            echo "Exit trap for testing v2lvs mechanism."
            ;;
      esac
   fi

   summary="${cellname}.lvs.report"
   # need to create the driver deck..."
   DRIVER="_lvs_driver_"
   echo "// "`date` > $DRIVER
   echo "// $script ..." >> $DRIVER
   echo "//   $version_string" >> $DRIVER
   echo "//   Cell=$cellname" >> $DRIVER
   echo "//   Working Directory=$MGC_WD" >> $DRIVER
   echo "//   GDS file=$gds_file" >> $DRIVER
   echo "//   Rule Deck=$main_rule_deck" >> $DRIVER
   echo " " >> $DRIVER
   echo "LAYOUT PATH \"$gds_file\"" >> $DRIVER
   echo "LAYOUT PRIMARY ${layout_primary}" >> $DRIVER
   echo "LAYOUT SYSTEM GDSII" >> $DRIVER
   echo " " >> $DRIVER
   echo "SOURCE PATH \"$spice_netlist\"" >> $DRIVER
   echo "SOURCE PRIMARY ${netlist_primary}" >> $DRIVER
   echo "SOURCE SYSTEM SPICE" >> $DRIVER
   echo " " >> $DRIVER
   echo "MASK SVDB DIRECTORY \"svdb\" QUERY" >> $DRIVER
   echo "LVS REPORT \"${summary}\"" >> $DRIVER
   echo "LVS EXECUTE ERC NO" >> $DRIVER

   echo "#IFDEF \$MGC_CALIBRE_INTERACTIVE" >> $DRIVER
   echo "   DRC ICSTATION YES" >> $DRIVER
   echo "#ENDIF" >> $DRIVER


   echo "INCLUDE \"${main_rule_deck}\"" >> $DRIVER

   export CD40LVS="yes"
   export DRYETCH="yes"
   export LVSBATCHMODE="no"
   export LVSTEST="no"
   export LVSTEXTMODE="yes"
   export SERIESRES="yes"
   if [ $splitground -eq 1 ]
   then
      export SPLITGROUND="yes"
   else
      export SPLITGROUND="no"
   fi

   echo "CD40LVS = $CD40LVS"
   echo "DRYETCH = $DRYETCH"
   echo "LVSTEST = $LVSTEST"
   echo "LVSTEXTMODE = $LVSTEXTMODE"
   echo "LVS_INCLUDE_RC = $LVS_INCLUDE_RC"
   echo "SERIESRES = $SERIESRES"
   echo "SPLITGROUND = $SPLITGROUND"

   #export MGC_CALIBRE_INTERACTIVE=1

   if [ $hier_mode -eq 1 ]
   then
      if [ -n "$hcells_file" ]
      then
         echo "Running: calibre -lvs -hier -hcells $hcells_file -spice ${cellname}.lay.net $DRIVER"
         calibre -lvs -hier -hcells $hcells_file -spice ${cellname}.lay.net -nowait $DRIVER
      else
         #echo "Running: calibre -lvs -hier -automatch -spice ${cellname}.lay.net $DRIVER"
         #calibre -lvs -hier -automatch -spice ${cellname}.lay.net $DRIVER
         echo "Running: calibre -lvs -hier -spice ${cellname}.lay.net $DRIVER"
         calibre -lvs -hier -spice ${cellname}.lay.net -nowait $DRIVER
      fi
   elif [ $hier_mode -eq 2 ]
   then
      echo "Running: calibre -lvs -cb $DRIVER"
      calibre -lvs -cb $DRIVER
   else
      echo "Running: calibre -lvs $DRIVER"
      calibre -lvs $DRIVER
   fi
fi

