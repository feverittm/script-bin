#!/bin/ksh
# Name:     doit.route
# Version:  $Header:$
# Date:     Wed May  3 08:24:48 MDT 2000
# Author:   Floyd Moore
#
# Synopsis: This script automates the remote route process running the cct
#         router.
# Usage:    doit.route <blockname>
#         default blockname=LQTOP120
#####################################
#

logfile="/net/fmlyd3/mnt/d3b/mako_route_test/route_info.db"
version_string='Version: \$Revision:\$'

#
#
script=`basename $0`

usage()
{
   echo "**************** CCT Route Automation ***************"
   echo
   echo "Usage: $script {options...} <blockname>"
   echo $version_string
   echo
   echo "Normal Options:"
   echo "    -b         : Abbreviated Bippy check."
   echo "    -n         : New block,  copy default rules and recipes."
   echo "    -v         : Verbose Messages"
   echo "    -x         : Turn on debugging information"
   echo "    -f         : Force.  Re-run all steps."
   echo "    -p <name>  : Name of route block piece."
   echo "    -F         : Continue on error."
   echo "    -P         : Don't worry about re-running make_pconn"
   echo "    -E         : Don't worry about re-running make_eval"
   echo "    -routeonly : Only run the router"
   echo "    -noroute   : Don't run the router"
   echo "    -noconvert : Don't re-run cb2cct"
   echo "    -nopiglet  : Don't run cct2pig"
   echo
   exit 1
}

########################
# Define KSH functions #
########################

function error_trap
{
   if [ $run_on_error -ne 0 ]
   then
      let run_errors=$run_errors+1
      if [ $verbose -eq 1 ]
      then
         echo "$script step failed.  run_on_error set continuing... "
      fi
      return
   else
      terminate $1
   fi
}

function terminate
{
   rm -f /tmp/*.$$

   if [ $1 -eq 0 ]
   then
      echo "$script $blockname Sucessful."
      exit 0
   else
      echo "\n$script $blockname Failed."
      if [ $debug -ne 0 ]
      then
         echo "Exit Status: $1"
      fi
      exit $1
   fi
}

function get_secs
{
   time=`date +%X`
   let s=`echo $time | awk -F: '{print $1*3600+$2*60+$3}' - `
   echo $s
   return $s
}

function check_lockstatus
{
   if [ $verbose -eq 1 ]
   then
     echo "Checking $1 locks...\c"
   fi
   cb_sem -n $1 : > /dev/null 2>&1
   if [ $? -ne 0 ]
   then
     echo "Block's $1 rep is locked"
     terminate 1
   else
     if [ $verbose -eq 1 ]
     then
        echo "clear"
     fi
     return 0
   fi
}

function run_tool
{
   start_tool=`get_secs`
   echo "Running $1...\c"
   if [ $run_tool_inc_stdout -eq 1 ]
   then
      $1 $blockname
   else
      $1 $blockname > /dev/null 2>&1
   fi
   status=$?

   if [ ! $status = 0 ]
   then
      echo "\n$1 failed for block"
      short_tool=`echo $1 | awk '{print $1}' -`
      error_trap 1
   else
      echo "successful."
   fi
   let end_tool=`get_secs`
   let end_tool=$end_tool-$start_tool
   echo "$blockname:`uname -m`:`model`:`date +%Y%m%d_%H%M`:$user:'$1':$end_tool" >> $logfile

}

function clean_exit
{
   echo "Recieved Signal,  cleaning up"
   rm -f /tmp/*.$$
   exit 1
}

function parse_options
{
   echo $@ | tr -s " *" "\012" |
   while read -r option
   do
      if [ $debug -eq 1 ]
      then
         echo "Processing Option: '$option'"
      fi
      case $option in
      -x)          echo "Debug mode on"; debug=1;;

      -V)          echo $version_string; 
                   exit 1
                   ;;

      -n)          new_block_mode=1;;

      -datechk)    datechk=1;;

      -f)          let force=1;;

      -F)          run_on_error=1;;

      -P)          dont_run_pconn=1;;

      -E)          dont_run_eval=1;;

      -b)	   full_bippy_check=0;;

      -options)    exit_after_options=1;;

      -p)          shift;
                   route_piece=$1;
                   ;;

      -v)          verbose=1;;

      -?)          usage;;

      -help)	   usage;;

      -noroute)    do_route=0;;

      -noconvert)  do_convert=0;;

      -nopiglet)   do_piglet=0;;

      -routeonly)  do_route_only=1;;

      -*)          echo "Invalid Argument: $option";   usage;;

       *)          blockname=${option:-"LQTOP120"};;
      esac
   done
   if [ $? -ne 0 ]
   then
     exit 1
   fi
}

##########################################
#     Main script
##########################################

let run_errors=0
trap "clean_exit" QUIT
trap "clean_exit" HUP
trap "clean_exit" TERM
trap "clean_exit" INT

if [ $# -eq 0 ] 
then
   usage
   exit 1
fi

# set globals
let debug=0
let verbose=0
let exit_after_options=0
let full_bippy_check=1
let run_on_error=0
let datechk=0;
let new_block_mode=0
let do_piglet=1
let do_route=1
let do_convert=1
let do_route_only=0
let run_tool_inc_stdout=0
let force=0
let dont_run_eval=0
let dont_run_pconn=0
unset route_piece
user=`whoami`

if [ $1 = "-?" -o $1 = "-help" ]
then
   usage;
   terminate 1
fi

parse_options $@

if [ ! -z "$CBMAKE_NO_STOP" ]
then
   echo "Setting run_on_error based on CBMAKE_NO_STOP=TRUE"
   run_on_error=1
fi

blockpath=`get_dir $blockname`
if [ -z "$blockpath" ]
then
   echo "Bad blockname: $blockname"
   terminate 1
fi

if [ ! -f $blockpath/bm.db ]
then
   echo "Cannot locate block $blockname"
   terminate 1
fi

if [ ! -w $blockpath ]
then
   echo "User cannot write to block's directory: $blockpath"
   terminate 1
fi

if [ ! -z "$route_piece" ]
then
   piece_path=`get_dir ${route_piece}`
   if [ -z "$piece_path" ]
   then
      echo "Bad blockname for route blockpiece: $route_piece"
      terminate 1
   fi
   if [ -d $piece_path -a -d "$piece_path/art_xy" -a -f "$piece_path/art_xy/piglet.db" -a ! -w "$piece_path/art_xy/piglet.db" ]
   then
      echo "Cannot write to piece's artwork rep";
      terminate 1
   fi
fi

if [ $exit_after_options -eq 1 ]
then
   terminate 0
fi

if [ ! -d $blockpath/cct ]
then
   echo "Cannot locate cct directory for block $blockname"
   if [ $new_block_mode -eq 1 ]
   then
      mkdir $blockpath/cct
      # need to add stuff to copy the default do files and rule files
      cp /xy/users/red/route_info/default.do $blockpath/cct/${blockname}.do
      cp /xy/users/red/route_info/default.rules.do $blockpath/cct/${blockname}.rules.do
   else
      terminate 1
   fi
fi

echo "$script $blockname ..."
echo "   $version_string"
echo "   Verify mode=${ICPROCESS}"
echo "---------------------------------"

rm -f /tmp/*.$$

############################################################
#  Prep block for route
############################################################

# Starting timestamp
start_date=`date +%x-%X`
date_match=`date +%j`
script_start_time=`get_secs`

   cctdir="$blockpath/cct"
   dofile="$cctdir/${blockname}.do"
rulesfile="$blockpath/cct/${blockname}.rules.do"
  dsnfile="$blockpath/cct/${blockname}.dsn"
   sesfile="$cctdir/${blockname}.ses"
   pigart="$blockpath/art_${ICPROCESS}/piglet.db"
  connbdl="$blockpath/conn_${ICPROCESS}/bdl.out"
  lconnbdl="$blockpath/lconn_${ICPROCESS}/bdl.out"

stamp=`date +%Y%m%d_%H%M`
script_logfile="$cctdir/route_log.$stamp"

if [ $force -eq 1 -o $do_route_only -eq 0 ]
then

############
# Generate cct files
############

if [ ! -f $blockpath/art_${ICPROCESS}/piglet.db ]
then
   echo "Cannot locate artwork piglet.db for block $blockname"
   terminate 1
fi

if [ ! -f $blockpath/sch_${ICPROCESS}/piglet.db ]
then
   echo "Cannot locate schematic piglet.db for block $blockname"
   terminate 1
fi
   
let run_convert=0
if [ ! -f $dsnfile ]
then
   echo "No .dsn file found.  Running cb2cct conversion"
   let run_convert=1
else
   if [ $pigart -nt $dsnfile ]
   then
      echo "Artwork piglet.db is newer than the .dsn file.  Redoing the cb2cct"
      let run_convert=1
   fi
   if [ $connbdl -nt $dsnfile ]
   then
      echo "Conn_${ICPROCESS} bdl is newer than the .dsn file.  Redoing the cb2cct"
      let run_convert=1
   fi
   if [ $lconnbdl -nt $dsnfile ]
   then
      echo "lconn_${ICPROCESS} bdl is newer than the .dsn file.  Redoing the cb2cct"
      let run_convert=1
   fi
fi
if [ $do_convert -eq 1 -a \( $force -eq 1 -o $run_convert -eq 1 \) ]
then
   ###############
   #  Schematic  #
   ###############

   check_lockstatus $blockpath/sch_${ICPROCESS}
      
   if [ $dont_run_eval -eq 0 ]
   then
      run_tool "make_eval "
   fi

   check_lockstatus $blockpath/art_${ICPROCESS}

   #generate connectivity for artwork
   if [ $dont_run_pconn -eq 0 ]
   then
      run_tool "make_pconn "
   fi

   status=`grep "pconn for $blockpath is valid" $blockpath/conn_${ICPROCESS}/make_pconn.log | wc -l`
   if [ $status -ne 1 ]
   then
      echo "make_pconn has errors, check verify_summary results."
      error_trap 1
   fi

   echo "Running cb2cct..."
   let save=$run_tool_inc_stdout
   let run_tool_inc_stdout=1
   opts=""
   if [ -f $cctdir/passthrus.def ] 
   then
      echo "Including passthru information in conversion..."
      opts="$opts -f $cctdir/passthrus.def"
   fi
   if [ -f $cctdir/via_file.def ] 
   then
      echo "Including via information in conversion..."
      opts="$opts -v $cctdir/via_file.def"
   fi
   if [ -f $cctdir/metalrules.def ] 
   then
      echo "Including routing rules information in conversion..."
      opts="$opts -m $cctdir/metalrules.def"
   fi
   run_tool "cb2cct -p $opts "
   let run_tool_inc_stdout=$save

   run_tool "/net/hpesfem/home/red/mydesigns/mako/bin/fix_boundary.pl -f"

   if [ -f $cctdir/only_in_art ]
   then
      bad=`cat $cctdir/only_in_art | egrep -v "fill_" | wc -l`
      if [ $bad -gt 0 ]
      then
         echo "Non-Fill Components left over in the artwork"
      else
         echo "Only fill cells are left over..."
      fi
   fi
else
   if [ $do_convert -eq 1 ]
   then
      echo "cct file are up-to-date and ready for the route."
   fi
fi
   
fi
############
# Run the route
############
if [ $do_route -eq 1 ]
then
   savedir=`pwd`
   cd $cctdir
   if [ ! -f $dsnfile -a ! -f $dofile -a ! -f $rulesfile ]
   then
      echo "Connect route without cct setup file.  Check cct directory"
      terminate 1
   fi
   start_tool=`get_secs`
   cmd="cct ${blockname}.dsn -nog -do ${blockname}.do"
   echo "Running route using '$cmd'"
   $cmd > $script_logfile 2>&1
   status=$?
   let end_tool=`get_secs`
   let end_tool=$end_tool-$start_tool
   if [ $status -ne 0 ]
   then
      echo "cct exitted with status non-zero: Runtime=$end_tool"
      terminate 1
   else
      echo "successful"
   fi

   echo "$blockname:`uname -m`:`model`:`date +%Y%m%d_%H%M`:$user:'$cmd':$end_tool" >> $logfile
   cd $savedir
fi  

############
# Convert the route back to piglet archive file.
############
if [ $do_piglet -eq 1 ]
then
   savedir=`pwd`
   cd $cctdir
   if [ ! -f $sesfile ]
   then
      echo "Connect find the cct session file to convert back to piglet."
      terminate 1
   fi
   stamp=`date +%Y%m%d_%H%M`
   start_tool=`get_secs`
   cmd="cct2pig.pl ${blockname}.ses"
   echo "Converting route session file back to piglet"
   $cmd > route.arc
   status=$?
   let end_tool=`get_secs`
   let end_tool=$end_tool-$start_tool
   if [ $status -ne 0 ]
   then
      echo "An error occurred during the cct->piglet conversion"
      terminate 1
   else
      echo "  ... successful"
      ls -l route.arc
   fi

   # convert artwork route.arc to blockpiece
   if [ ! -z "$route_piece" ]
   then
      if [ -f "${piece_path}/art_xy/piglet.db" ]
      then
         rm -f ${piece_path}/art_xy/piglet.db
         if [ $? -ne 0 ]
         then
            echo "could not remove old blockpiece"
            terminate 1
         fi
      fi
      echo "running piglet to covert archive to blockpiece..."
      PIGDIR=$CBROOT/$ICPROCESS/piglet
      SB_OUTDEV=""
      logfile="/tmp/arclog$$"
      PIG_ENV=$PIGDIR/artrc
      export PIG_ENV SB_OUTDEV

      cmdfile=/tmp/arccmd$$

      cat > $cmdfile << %%
EDIT ${route_piece}A ;
SHO #A;
LEV 4;
INP ${cctdir}/route.arc;
SAVE;
BYE;
%%
      if [ $debug -eq 0 ]
      then
          piglet < $cmdfile > /dev/null 2>&1
      else
          /bin/time piglet < $cmdfile > pig.out 2>&1
      fi
      cd $savedir
   fi

fi

#
# Done
#

script_end_time=`get_secs`
end_date=`date +%j`
if [ $end_date -eq $date_match ]
then
   let run_time=$script_end_time-$script_start_time
else
   echo "Run spans multiple days"
   echo "  Start Date/time: $date_match at $script_start_time
   echo "  End Date/time:   $end_date   at $script_end_time
   let span=$end_date-$date_match
   echo "   ... run spanned $span days"
   let run_time=3600*24*$span+$script_end_time-$script_start_time
   echo "   ... for a run time of $run_time seconds"
fi
echo "Route complete at `date`"
echo "   run time in seconds: $run_time"
echo "$blockname:`uname -m`:`model`:`date +%Y%m%d_%H%M`:$user:'make_route':$run_time" >> $logfile

exit 0
